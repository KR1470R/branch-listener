#!/bin/bash

INSTALLED_BRANCH_LISTENER_DIR="$HOME/.config/branch-listener"

function check_perfomance {
    if [ -z "$BRANCH_LISTENER_MAIN_DIR" ] || [ -d "$BRANCH_LISTENER_MAIN_DIR" ]; then
        if [ -d "$INSTALLED_BRANCH_LISTENER_DIR" ]; then
            if echo "${PWD##*/}" | grep -q "branch-listener" && [ "$1" != "uninstall" ]; then
                BRANCH_LISTENER_MAIN_DIR="."
            else
                BRANCH_LISTENER_MAIN_DIR=$INSTALLED_BRANCH_LISTENER_DIR
            fi
        else
            BRANCH_LISTENER_MAIN_DIR="."
        fi
    else
        BRANCH_LISTENER_MAIN_DIR="."
    fi

    if [ -n "$BRANCH_LISTENER_MAIN_DIR" ] && [ -f "$BRANCH_LISTENER_MAIN_DIR"/configs/server/config.json ]; then
        BRANCH_LISTENER_PORT=$(runTool "port" | tail -1)
    fi
}

function replaceUrlVar {
    line=$1
    echo "trying to remove $line"

    new_file=$(grep -v "$line" "$BRANCH_LISTENER_SHELL_RC")

    echo "$new_file" > "$BRANCH_LISTENER_SHELL_RC"
}

function kill_listener {
    echo "checking is listener alive..."
    if [ -n "$BRANCH_LISTENER_PORT" ] && [ "$(lsof -t -i:$BRANCH_LISTENER_PORT -sTCP:LISTEN)" ]; then
        kill -9 "$(lsof -t -i:$BRANCH_LISTENER_PORT -sTCP:LISTEN)"
        echo "listener has been killed"
    else 
        echo "listener is not alive at port <$BRANCH_LISTENER_PORT>"
    fi 
}

function restart_listener {
    echo "checking is listener alive..."
    if [ -n "$BRANCH_LISTENER_PORT" ] && [ "$(lsof -t -i:$BRANCH_LISTENER_PORT -sTCP:LISTEN)" ]; then
        curl localhost:"$BRANCH_LISTENER_PORT"/restart
        echo "listener has been restarted"
    else 
        echo "listener is not alive at port <$BRANCH_LISTENER_PORT>"
    fi 
}

function uninstall_listener {
    if ! [ -d "$INSTALLED_BRANCH_LISTENER_DIR" ]; then
        echo "branch-listener is not installed."
        # exit 1
    fi

    if [ -z "$BRANCH_LISTENER_SHELL_RC" ]; then
        echo "cannot find registered shell rc, trying to defind..."
        if echo "$SHELL" | grep -q 'zsh'; then
            BRANCH_LISTENER_SHELL_RC="$HOME/.zshrc"
        elif echo "$SHELL" | grep -q 'bash'; then
            BRANCH_LISTENER_SHELL_RC="$HOME/.bashrc"
        else 
            echo "unsupportable shell! exit"
            exit 1
        fi

        echo "defined $BRANCH_LISTENER_SHELL_RC"
    fi

    if  cat "$BRANCH_LISTENER_SHELL_RC" | grep -q "export BRANCH_LISTENER_SHELL_RC="; then
        replaceUrlVar "$BRANCH_LISTENER_SHELL_RC" 
    fi

    if cat "$BRANCH_LISTENER_SHELL_RC" | grep -q "branch-listener run"; then
        sed -i '/branch-listener run/d' "$BRANCH_LISTENER_SHELL_RC"
    fi
    
    BRANCH_LISTENER_MAIN_DIR=$INSTALLED_BRANCH_LISTENER_DIR
    echo "checking for BRANCH_LISTENER_MAIN_DIR: $BRANCH_LISTENER_MAIN_DIR" 
    if [ "$BRANCH_LISTENER_MAIN_DIR" != "." ]; then
        if cat "$BRANCH_LISTENER_SHELL_RC" | grep -q "export BRANCH_LISTENER_MAIN_DIR="; then
            replaceUrlVar "$BRANCH_LISTENER_MAIN_DIR"
        fi

        if cat "$BRANCH_LISTENER_SHELL_RC" | grep -q 'export PATH=$PATH:'"$BRANCH_LISTENER_MAIN_DIR"; then
            replaceUrlVar "\$PATH:$BRANCH_LISTENER_MAIN_DIR" #"export PATH=\$PATH:"
        fi

        echo "removing $BRANCH_LISTENER_MAIN_DIR"
        rm -rf "$BRANCH_LISTENER_MAIN_DIR"
    fi

    unset BRANCH_LISTENER_MAIN_DIR
    unset BRANCH_LISTENER_SHELL_RC

    kill_listener false
}

function status_listener {
    echo "$BRANCH_LISTENER_PORT"
    if [ "$(lsof -t -i:$BRANCH_LISTENER_PORT -sTCP:LISTEN)" ]; then
        echo "branch-listener is alive at $BRANCH_LISTENER_PORT" false
    else 
        echo "branch-listener is not alive"
    fi 
}

function runTool {
    if [ -n "$BRANCH_LISTENER_MAIN_DIR" ]; then
        local list_path="$BRANCH_LISTENER_MAIN_DIR/dist/src/tools/runTool.js"
    elif echo "${PWD##*/}" | grep -q "branch-listener"; then
        local list_path="./dist/src/tools/runTool.js"
    else
        echo "uknown current working directory! please go to branch-listener repository directory!"
        exit 1
    fi

    echo "$list_path" "$1" "$2" "$3" "$4" "$5"
    node "$list_path" "$1" "$2" "$3" "$4" "$5"
}

function help_usage {
    echo "Usage: branch-listener [setup] [run] [add]  [start]
                                  [restart] [stop] [remove] 
                                  [list] [edit] [kill] [status]
                                  [uninstall] [help] <args>

                setup       Setups branch-listener configs. No args needed;

                run         Runs Branch-listener server. No args needed;

                add         Adds listener for specified CVS. Second arg is name of cvs;

                start       Starts listeners. If args was not specified - runs all listeners,
                            to start specified listener you have to write cvs name of listener
                            as the first argument and id of the config of listener as the second;

                restart     Restarts branch-listener server. No args needed;

                stop        Stops listeners. The arguments works as well as for start command;

                remove      Removes listeners. The arguments works as well as for start command;

                list        Shows table with listeners information. 
                            If args was not specified - shows all listeners tables.
                            To show specified cvs listeners you need to specify cvs name as the second arg;

                edit        Edits listener configs.
                            Example: branch-listener edit gitlab 0 token ********************;
                            You need to restart the branch-listener to get you changes to work as well;

                kill        Kills branch-listener. 
                            Stops the branch-listener server and all listeners. No args needed;

                status      Outputs status of branch-listener's server. No args needed;

                uninstall   Uninstalls branch-listener and removes all configs and logs. No args needed;

                help        Shows this page. No args needed;
    "

    exit 0
}

function narrowing() {
    tool_name="$1"
    cvs_name="$2"
    id="$3"
    key="$4"
    value="$5"
    
    if [ "$tool_name" = "kill" ]; then
        kill_listener
    elif [ "$tool_name" = "uninstall" ]; then
        uninstall_listener
    elif [ "$tool_name" = "status" ]; then
        status_listener
    elif [ "$tool_name" = "help" ]; then
        help_usage
    else
        runTool "$tool_name" "$cvs_name" "$id" "$key" "$value"
    fi
}

check_perfomance "$1"
narrowing "$1" "$2" "$3" "$4" "$5"
